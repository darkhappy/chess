@startuml Class
!theme vibrant

'https://plantuml.com/class-diagram
package Models {
    abstract class Piece {
        - _colour : Colour
        + ValidMove(int x1, int y1, int x2, int y2) : bool
        + ToString() : string
        + CanCollide() : bool
        + CanPromote() : bool
        + IsEssential() : bool
    }
    
    abstract class StartingPiece {
        - _hasMoved : bool
    }

    class Pawn {
        + ValidMove(int x1, int y1, int x2, int y2) : bool
        + ToString() : string
        + CanPromote() : bool
    }

    class Rook{
        + ValidMove(int x1, int y1, int x2, int y2) : bool
        + ToString() : string
    }

    class Knight{
        + ValidMove(int x1, int y1, int x2, int y2) : bool
        + ToString() : string
        + CanCollide() : bool
    }

    class Bishop{
        + ValidMove(int x1, int y1, int x2, int y2) : bool
        + ToString() : string
    }

    class Queen {
        + ValidMove(int x1, int y1, int x2, int y2) : bool
        + ToString() : string
    }

    class King {
        + ValidMove(int x1, int y1, int x2, int y2) : bool
        + ToString() : string
        + IsEssential() : bool
    }
    
    class Match {
        - _board : Board
        - _current : Colour
        - _history : string[]
        - _turnNumber : int
        + ExportBoard() : string
        + ExportHistory() : string[]
        + ValidTurn (int origin, int target) : bool
        + MakeTurn (int origin, int target) : void 
        + ValidSelection (int cell, bool firstClick) : bool
        + HasPromotable (int target) : bool
        + Check() : bool
        + Checkmate() : bool
        + Stalemate() : bool
        + Castle(int origin, int target) : void
    }
    class Board {
        - _cells : Cell[]
        + ToString() : string
        + Collision (int origin, int target) : bool
        + SameColour (int cell, Colour colour) : bool
        + ValidMove (int origin, int target) : bool
        + MoveCellTo (int origin, int target) : void
        + GenerateBoard (string board) : void
        + IsEssentialExposed (Colour colour) : bool
        + HasPromotable (int target) : bool
        + GetAssailants (Colour colour) : List<int>
        - GetEssentialPiece (Colour colour) : int
        - GetAttackingPieces (Colour colour, int target) : List<int>
        + HasAttackersAroundEssential(Colour colour) : bool
    }
    class Cell {
        - _piece : Nullable<Piece>
        + IsEmpty() : bool
        + HasCollision() : bool
        + HasPromotable() : bool
        + HasEssential() : bool
        + ValidMove (int x1, int y1, int x2, int y2) : bool
        + Colour() : Colour
    }
    
    class Player {
        - _name : string
        - _points : int
    }
    enum Colour {
        Black
        White
    }

    Match "1" *---> "1" Board
    Board "1" *---> "64" Cell
    Cell "1" *---> "0..1" Piece
    Pawn -u-|> StartingPiece
    Rook -u-|> StartingPiece
    Knight -u-|> Piece
    Bishop -u-|> Piece
    Queen -u-|> Piece
    King -u-|> StartingPiece
    StartingPiece -u-|> Piece
}

package Controllers {
    class Chess {
        - _listGames : List<GameController>
        + main() : void 
        + NewGame() : void
        + StartGame(Player[2] players) : void
        + ManagePlayers() : void
        + Exit() : void
    }

    class GameController  {
        - _main : Chess
        - _selected : int
        - _match : Match
        - _playerA : Player
        - _playerB : Player
        - _fiftyTurns : int
        - _view : FormMatch
        - Rules(int origin, int target) : void
        - Check() : bool
        - Checkmate() : bool
        - Castle() : bool
        - Stalemate() : bool
        - FiftyTurns() : bool
        - SameBoard() : bool
        - Turn (int origin, int target) : void
        + Selection(int cell) : void
        + Resign() : void
    }

    class PlayerController {
        - _main : Chess
        - _list : List<Player>
        + Add() : void
        + Remove() : void
    }

    PlayerController "1" o---> "1" Chess
    Chess "1" *--> "0..*" GameController
    GameController "1" o---> "1" Chess
}

package Views {
    class FormMenu {
        - _main : Chess
        + Start(object sender, System.EventArgs e) : void
        + Exit(object sender, System.EventArgs e) : void
        + ManagePlayers(object sender, System.EventArgs e) : void
    }
    class FormMatch {
        - _controller : GameController
        - _board : string
        + GridClick(object sender, System.EventArgs e) : void
        + DrawBoard(string board) : void
        + DrawSelection(int cell) : void
        + ShowMessage(string message) : void
        + VictoryMessage() : void
    }
    
    class FormLeaderboard {
        - _controller : PlayerController
        + ShowList(List<Player>) : void
        + Add() : void
        + Remove() : void 
        + Back() : void
    }
    class FormPromotion {
        - _controller : GameController
        + Submit(object sender, System.EventArgs e) : void
    }
    class FormSelection {
        - _controller : main
        + OpenLeaderboard() : void
        + Start() : Player[2]
        + Cancel() : void
    }
    
}

GameController "1" *----> "1" Match
GameController "1" o--right--> "2" Player
Chess -up-> FormSelection
GameController "1" *-up-> "1" FormMatch
PlayerController "1" *-up-> "0..1" FormLeaderboard
PlayerController "1" *---> "0..n" Player
GameController "1" *---> "0..1" FormPromotion
FormMatch "1" o--> "1" GameController
FormLeaderboard "1" o--> "1" PlayerController
FormPromotion o--> "1" GameController
FormMenu "1" o--> "1" Chess
FormSelection "1" o--> "1" Chess

@enduml