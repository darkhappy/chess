@startuml Class
!theme vibrant

'https://plantuml.com/class-diagram
package Models {
    abstract class Piece {
        - _colour : Colour
        - _hasMoved : bool
        + ValidMove(int x1, int y1, int x2, int y2) : bool
        + ToString() : string
    }

    class Pawn extends Piece {
    }

    class Rook  extends Piece {

    }

    class Knight extends Piece {

    }

    class Bishop extends Piece {

    }

    class Queen extends Piece {

    }

    class King extends Piece {
    }
    
    class Match {
        - _board : Board
        - _current : Colour
        - _history : string[]
        - _turnNumber : int
        + Export() : string
        + Turn (int start, int target) : bool
        
    }
    class Board {
        - _cells : Cell[]
        + ToString() : string
        + Collision(int start, int target) : bool
    }
    class Cell {
        - _item : Nullable<Piece>
        + GetCellType(int cell) : CellType
    }
    
    class Player {
        - _name : string
        - _points : int
    }
    enum Colour {
        Black
        White
    }
    enum Speciality {
        NoCollisions
    }
    enum CellType {
    Black
    White
    Empty
    }
        

    Match *--> Board
    Board *-left-> Cell
    Cell *--> Piece
}

package Controllers {
    class Chess {
        - _listGames : List<GameController>
        + main() : void 
        + NewGame() : void
        + StartGame(Player[2] players) : void
        + ManagePlayers() : void
        + Exit() : void
    }

    class GameController  {
        - _main : Chess
        - _match : Match
        - _playerA : Player
        - _playerB : Player
        - _tieCounter : int
        - _view : FormMatch
        - Check() : bool
        - Checkmate() : bool
        - Castle() : bool
        - Promotion() : bool 
        - FiftyTurns() : bool
        - SameBoard() : bool
        + Turn (int start, int target) : void
        + Resign() : void
    }

    class PlayerController {
        - _main : Chess
        - _players : List<Player>
        + Add() : void
        + Remove() : void
    }

    Chess *--> GameController
    GameController o--> Chess
    PlayerController o-up-> Chess
}

package Views {
    class FormMenu {
        - _main : Chess
        + Start(object sender, System.EventArgs e) : void
        + Exit(object sender, System.EventArgs e) : void
        + ManagePlayers(object sender, System.EventArgs e) : void
    }
    class FormMatch {
        - _controller : GameController
        - _selected : int
        + GridClick(object sender, System.EventArgs e) : void
        + DrawBoard(string board) : void
        + ShowMessage(string message) : void
        + VictoryMessage() : void
    }
    
    class FormLeaderboard {
        - _controller : PlayerController
        + ShowList(List<Player>) : void
        + Add() : void
        + Remove() : void 
        + Back() : void
    }
    class FormPromotion {
        - _controller : GameController
        + Submit(object sender, System.EventArgs e) : void
    }
    class FormSelection {
        - _controller : main
        + OpenLeaderboard() : void
        + Start() : Player[2]
        + Cancel() : void
    }
    
}

GameController *-left-> Match
GameController o-left-> Player
PlayerController *-left-> Player
Chess *-down-> FormSelection
GameController *-down-> FormMatch
PlayerController *-down-> FormLeaderboard
GameController *-down-> FormPromotion
FormMatch o-up-> GameController
FormLeaderboard o-up-> PlayerController
FormPromotion o-up-> GameController
FormMenu o-up-> Chess
FormSelection o-up-> Chess

@enduml