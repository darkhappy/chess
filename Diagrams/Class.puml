@startuml Class
!theme toy

'https://plantuml.com/class-diagram
namespace Models {
    abstract class Piece {
        - _colour : Colour
        + ValidMove(int x1, int y1, int x2, int y2) : bool
        + ToString() : bool
    }

    class Pawn extends Piece {
    }
    note bottom of Pawn
        Moves 1 cell <b>up</b>
        Attacks 1 cell <b>up-left</b> or <b>up-right</b>
        On initial position, can move 2 cells <b>up</b>
        Can en passant
    end note

    class Rook  extends Piece {

    }
    note bottom of Rook
        Moves and attacks 
        n cells <b>horizontally</b> or <b>vertically</b>
    end note

    class Knight extends Piece {

    }
    note bottom of Knight
        Moves and attacks 
        in an <b>L shape</b>
        Can go over other pieces
    end note

    class Bishop extends Piece {

    }
    note bottom of Bishop
        Moves and attacks 
        n cells <b>diagonally</b>
    end note

    class Queen extends Piece {

    }
    note bottom of Queen
        Moves and attacks 
        n cells <b>horizontally, vertically or diagonally</b>
    end note

    class King extends Piece {
        - _canCastle : bool
        + Castle()
    }
    note bottom of King
        Moves and attacks 
        1 cells <b>horizontally, vertically or diagonally</b>
        Can castle
    end note

    class Match {
        - _board : Board
        - _history : string[]
        - _tieCounter : int
        - _current : Colour
        + Export() : string
        + Turn (int start, int target) : bool
    }
    class Board {
        - _cells : Cell[]
        + ToString() : string
    }
    class Cell {
        - _item : Nullable<Piece>
        + ToString() : string

    }
    class Player {
        - _name : string
        - _points : int
    }
    enum Colour {
        Black
        White
    }
    enum Speciality {
        NoCollisions
        
    }

    Match *--> Board
    Board *--> Cell
    Cell *--> Piece
}

namespace Controllers {
    class Chess {
        - _listGames : List<GameController>
        + main() 
        + StartGame()
        + Exit()
    }
    class GameController  {
        - _main : Chess
        + Turn (int start, int target) : bool
    }
    class ViewController  {
        - _main : Chess
        - _match : FormMatch
    }
    class PlayerController {
        - _main : Chess
        - _players : List<Player>
        + Add() : void
        + Remove() : void
    }

    Chess *--> GameController
    Chess *--> ViewController
    Chess *--> PlayerController
    GameController o--> Chess
    ViewController o--> Chess
    PlayerController o--> Chess
}

namespace Views {
    class FormMenu {
        - _main : Chess
        + BtnStart(object sender, System.EventArgs e) : void
        + BtnExit(object sender, System.EventArgs e) : void
        + Manage
    }
    class FormMatch {
        - _controller : ViewController
        - _previousClick : int
        + GridClick(object sender, System.EventArgs e) : void
    }
    class FormLeaderboard {
        - _controller : ViewController
        + ShowList(List<Player>) : void
        + Back() : void
    }
    class FormPromotion {
        - _controller : ViewController
        + Choice(object sender, System.EventArgs e) : void
    }
    class FormPlayer {
        + SubmitNames() : string[2]
    }
}

Controllers.GameController *-left-> Models.Match
Controllers.PlayerController *-left-> Models.Player
Controllers.PlayerController *-left-> Views.FormPlayer
Controllers.ViewController *-down-> Views.FormMatch
Controllers.ViewController *-down-> Views.FormLeaderboard
Controllers.ViewController *-down-> Views.FormPromotion
Views.FormMatch o-up-> Controllers.ViewController
Views.FormLeaderboard o-up-> Controllers.ViewController
Views.FormPromotion o-up-> Controllers.ViewController
Views.FormMenu o-up-> Controllers.Chess
Views.FormPlayer o-up-> Controllers.PlayerController

@enduml